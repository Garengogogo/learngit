html5:用于绘画的canvas;video、audio;article、footer、header、nav、section.
表单控件：date、time、email、url、search、calendar;


严格模式
" use strict"

所有语句一般都要有分号结尾;


var message = "hi",
    found = false,
    age = 29;
这样提高可读性;
基本数据类型：
Undefined
Null
Boolean
Number
String

typeof 操作符主要用于检测基本类型
若是一个对象或null 则返回“object”；

<script>
    var s = 'hello',
        b = true,
            i = 22,
            u,
            n = null,
            o = new Object();
    alert(typeof  s);    // string
    alert(typeof  b);    // number
    alert(typeof  i);    // boolean
    alert(typeof  u);    // undefined
    alert(typeof  n);    // object
    alert(typeof  o);    // object
</script>
 
instanceof 操作符主要用于检测引用类型
alert（person instanceof Object）  //变量person 是 Object ？是则返回true,



1:判断一个数是不是位于最大数和最小数之间
使用isFinite()函数
var result = 1000;
alert(isFinite(result));  // true

2:isNaN()
判断这个参数是不是“不是数值”
不是数值则为true
是数值则为false
alert(isNaN(NaN));  //true
alert(isNaN(10));   //false
alert(isNaN('blue'));  //true
alert(isNaN(true));  //false
    
var num1 = Number("hello world!");  //NaN
var num2 = Number(" ");             // 0
var num3 = Number("0000011");       //11
var num4 = Number(true);            //1

var num1 = parseInt("123blue");     //123
var num2 = parseInt('');            //Nan
var num3 = parseInt("oxA")          //10十六进制
var num4 = parseInt(22.5);          // 22
var num5 = parseInt("o70");         //56 八进制
var num6 = parseInt('70');          //70

在ecmascript5中parseInt()已经不具有解析八进制值得能力了
因此需要传入第二个参数
如：
var num = parseInt('oxAF', 16);   //175
也可以这样
var num = parseInt('AF', 16);    //175
var num1 = parseInt("10",2);     //2
var num2 = parseInt("10", 8);    //8
var num3 = parseInt("10", 10);    //10


parseFloat()只能解析十进制值，因此没有第二个参数可选。

3：转换字符串

var age = 11;
var ageAsstring = age.toString();   //字符串 11 
var found = true;
var foundAsString = found.toString();   //字符串 true

var num = 10;
alert(num.toString());     //"10"
alert(num.toString(2));    // "1010"

4:object类型

var o = new Object();

object 具有下列属性和方法

constructor :保存着用于创建当前对象的函数。对于前面的例子而言，构造函数（constructor）

hasownproperty（propertyName）：用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。
eg：o.hasownproperty("name")



for-in;

eg:
for (var proName in window) {
	document.write(proName);
}

arguments对象，类数组。
function hello(){
	alert("this is :" + arguments[0] + arguments[1]);
}
作用域

<script>
   var color = 'blue';
    function changeC() {
        if(color == 'blue') {
            color = 'red';
        } else {
            color = 'blue';
        }
    }
    changeC();
    alert('now color is :' + color);   //red
</script>



<script>
 function add(num1, num2) {
     var sum = num1 + num2;
     return sum;  //必须要return语句，否则，res则会报错。
 }
 var res = add(10, 20);
    alert(res);
</script>


创建Object实例的方法有两种
<script>
var person = new Object();
//var person = {};==  person = new Object();
    person.name = 'zhb';
    person.age = 24;
//    the second method
    var person = {
        name : "zhb",
        age : 24
    };

</script>

检测数组

if(Array.isArray(value)) {
    //do something
}
转换方法
var colors = ['red', 'blue', 'green'];
    alert(colors.toString());  // red,blue ,green  这是一个字符串。
    alert(colors.valueOf()[0]);  //red    返回的是一个数组。
 alert(colors.join("~~")); 用作分隔符

栈方法

栈是一种LIFO（后进先去）的数据结构。

push（）可以接受任意数量的参数，把他们逐个添加到数组的末尾，并返回修改后的数组长度。
pop（）从数组末尾移除最后一项，减少数组的长度值，然后返回移除的项。


var colors = ['red', 'blue', 'green'];
var count = colors.push('yellow', 'black');
    alert(count);  //5;
    var item = colors.pop();
    alert(colors.length);  //4

队列方法
队列是FIFO（先进先出）
shift（）他能够移除数组中的第一个项，并返回该项，同事数组的长度减一。
unshift（）在数组前端添加任意个项，并返回数组的长度。

重排序

reverse（）和sort（）

reverse（）方法会对反转数组项的顺序

 var values  =[1,2,3,4,5];
 values.reverse();
alert(values);  //5 4 3 2 1

sort排序
<script>
    function compare(value1, value2) {
        if(value1 < value2) {
            return -1;
        } else if(value1 > value2) {
            return 1;
        } else {
            return 0;
        }
    }
 var values  =[1,2,3,49,5];
values.sort(compare);
alert(values);
</script>


操作方法

concat()
可以基于当前数组中的所有项，创建一个新数组。

<script>
  var colors = ['red', 'green','blue'];
    var colors2 = colors.concat('yellow', ['black', 'brown']);
    alert(colors);
    alert(colors2);
</script>


slice（）方法

删除：可以删除任意数量的项，只需指定2个参数：要删除的第一项的位置和要删除的项数。
eg：splice（0， 2）会删除数组中的前两项。

插入：可以向指定位置插入任意的项，只需提供3个参数：起始位置，0（要删除的项数）和要插入的项。
eg：splice（2， 0，“red”,'green'）会从当前数组的位置2开始插入字符串‘red’和‘green’。

替换： 可以向指定位置插入任意数量的项，同时删除任意数量的项。需要3个参数。起始位置，要删除的项数和要插入任意数量的项。
eg：splice（2,1，‘red’，‘green’）会删除当前数组位置2 的项，然后再从位置2开始插入字符串‘red’和‘green’。

splice（）方法始终会返回一个数组，改数组中包含从原数组中删除的项。

位置方法：

<script>
  var number = [1,2,3,4,5,4,3,2,1];
    alert(number.indexOf(4));  //3
    alert(number.lastIndexOf(4));   // 5
    alert(number.indexOf(4,4));    // 5
    alert(number.lastIndexOf(4, 4));  // 5
    

</script>


迭代方法

every（）：对数组中每一项运行给定的函数，如果该函数对每一项都返回true，则返回true。
filter（）：对数组中的每一项运行给定的函数，返回函数会返回true的项组成的数组。
forEach()： 对数组中的每一项运行给定的函数，这个方法没有返回值。
map（）：对数组中的每一项运行给定的函数，返回每次函数调用的结果组成的数组。
some（）：对数组中的每一项运行给定的函数，如果该函数对任一项返回true，则返回true。
以上方法都不会修改数组中的包含的值。


<script>
  var number = [1,2,3,4,5,4,3,2,1];
  var everyResult = number.every(function(item, index, array) {
      return (item >2);
  });
    alert(everyResult);  //false

///////////////////////////////////////////////////////////////

  var someResult = number.some(function(item, index, array) {
      return (item >2);
  });
  alert(someResult);  //true

////////////////////////////////////////////////////////////

  var filterResult = number.filter(function(item, index, array) {
      return (item >2);
  });
  alert(filterResult);  //[3,4,5,4,3]

  ///////////////////////////////////////////////////////////////

  var mapResult = number.map(function(item, index, array) {
      return (item * 2);
  });
  alert(mapResult);

    ///////////////////////////////////////

  var forEachResult = number.forEach(function(item, index, array) {
     //执行某些操作
  });
  alert(forEachResult);
</script>

Date 类型

RegExp 类型

Function 类型

<script>
 function sum(num1, num2) {
     return num1 + num2;
 }
    var sun = function(num1, num2) {
        return num1 + num2;
    };
</script>

没有重载

<script>
 function addSomeNumber(num) {
     return num + 100;
 }
    function addSomeNumber(num) {
        return num + 200;
    }
    var result = addSomeNumber(100);  //300

    var addSomeNumber = function(num) {
        return num + 100;
    }
    addSomeNumber = function (num) {
        return num + 200;
    }
 var result = addSomeNumber(100);  //300
</script>


作为值得函数
<script>
function callSomeFunction(someFunction, someArgument) {
    return someFunction(someArgument);
}

    function add10(num) {
        return num + 10;
    }
    var result = callSomeFunction(add10, 10);
    alert(result);


    function getGreeting(name) {
        return "hello" + ' '+ name;
    }
    var result2 = callSomeFunction(getGreeting, 'zhenbiao');
    alert(result2);

</script>


按某种方式进行排序

<script>
function createComparisonFunction(propertyName) {
    return function(object1, object2) {
        var values1 = object1[propertyName];
        var values2 = object2[propertyName];
        if(values1 < values2) {
            return -1;
        } else if (values1 > values2) {
            return 1;
        } else {
            return 0;
        }
    };
}
    var data = [{name : 'zhb', age : 20},{name : 'wll',age : 23}];
    data.sort(createComparisonFunction('name'));
    alert(data[0].name);
    data.sort(createComparisonFunction('age'));
    alert(data[0].name);
</script>


递归调用

function faction(num) {
    if(num <= 1) {
        return 1;
    } else {
        return num * faction(num - 1);
    }
}
//    这方法对函数名的耦合性太高，可以使用arguments.callee
    function faction(num) {
        if (num <= 1){
            return 1;
        } else {
            return num * arguments.callee(num - 1);
        }
    }


函数属性和方法


每个函数都包含两个非继承而来的方法：apply（）和call（）方法。

    <script>
function sum (num1, num2) {
    return num1 + num2;
}
    function callSum1(num1, num2) {
        return sum.apply(this, arguments);
    }
    function callSum2(num1, num2) {
        return sum.apply(this, [num1, num2]);
    }
    alert(callSum1(10,10)); //20
    alert(callSum2(10,10)); //20
/////////////////////////////////////////
function callSum1(num1, num2) {
    return sum.call(this, num1, num2);
}
alert(callSum1(10,10)); //20
使用call（）方法的情况下，必须明确的传入每一个参数。

</script>


基本包装类型

var obj = new Object('some text');
alert(obj instanceof String);   //true


内置对象

Global对象

Math对象

var values = [1,2,3,4,5,6,7,8];
var max = Math.max.apply(Math, values);

舍入方法

Math.cell() 向上取整
Math.floor()  向下取整
Math.round() 执行四舍五入


random（）方法

值 = Math.floor(Math.random() * 可能值得总数 + 第一个可能的值)

function selectFrom(lowerValues, upperValues) {
	var choices = upperValues - lowerValues + 1;
	return Math.floor(Math.random() * choices + lowerValues);
}
var num = selectFrom(2, 10);
alert(num);

2016年1月29日

JavaScript高级程序设计--138










